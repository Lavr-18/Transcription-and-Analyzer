import os
import json
import re
import time
from openai import OpenAI
from dotenv import load_dotenv
from datetime import datetime
from pathlib import Path
from typing import Dict, Any

# Попытка импорта всех необходимых функций из retailcrm_integration
try:
    from retailcrm_integration import get_manager_name_from_crm, get_order_link_by_phone, \
        get_order_items_status
except ImportError:
    print(
        "ВНИМАНИЕ: Модуль retailcrm_integration не найден или функции не определены. Убедитесь, что он существует и доступен.")


    # Заглушки, чтобы код продолжал работать без ошибок
    def get_manager_name_from_crm(phone_number: str) -> str:
        print("  ⚠️ Заглушка: get_manager_name_from_crm не реализована. Возвращаем 'Неизвестно'.")
        return "Неизвестно"


    def get_order_link_by_phone(phone_number: str) -> str:
        print("  ⚠️ Заглушка: get_order_link_by_phone не реализована. Возвращаем ''.")
        return ""


    # ЗАГЛУШКА ДЛЯ НОВОЙ ФУНКЦИИ
    def get_order_items_status(phone_number: str) -> Dict[str, bool]:
        print("  ⚠️ Заглушка: get_order_items_status не реализована. Возвращаем 'False, False'.")
        return {'has_plant': False, 'has_cachepot': False}

load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=openai_api_key)

# ОБНОВЛЕНО: Добавлен новый критерий 'goal_clarified'
CRITERIA = [
    "улыбка_в_голосе",
    "установление_контакта",
    "квалификация",
    "выявление_потребности",
    "goal_clarified",  # НОВЫЙ КРИТЕРИЙ: Уточнил ли цель покупки
    "последующий_уточняющий",
    "пересогласование",
    "особенности_позиций",
    "возражение",
    "отработка_возражения",
    "докомплект",
    "допродажа",
    "состав_и_сумма",
    "согласование_деталей",
    "предоплата"
]

# Список всех возможных имен менеджеров, используемый для валидации
ALLOWED_MANAGERS = [
    "Анастасия",
    "Вера",
    "Амалия",
    "Евгения",
    "Антон",
    "Ангелина",
    "Виктория",
    "Александр",
    "Екатерина",
    "Алмаз",
    "Ксения",
]

# Новые категории звонков
CALL_CATEGORIES = [
    "Заказ",  # Целевой звонок по продажам/консультации по продуктам
    "Курьер/Технический",  # Звонки, связанные с доставкой, техническими проблемами
    "Сотрудничество",  # Звонки по вопросам партнерства, рекламы, поставки
    "Неизвестно"  # Если категория не может быть однозначно определена
]

# ОБНОВЛЕНО: Добавлено явное указание на логику докомплекта в промпте.
PROMPT_TEMPLATE = '''Ты эксперт по продажам, анализирующий телефонные звонки. Твоя задача — внимательно проанализировать диалог между Менеджером и Клиентом и выставить ТОЧНУЮ оценку по каждому из 14 критериев из чек-листа ОКК. Если менеджер не задал какой-то вопрос, нужно указать это в SUMMARY

**Категоризация звонка:**
Определи категорию данного звонка из следующего списка: {}.
В JSON-ответе добавь новое поле "call_category" со значением из этого списка.
Если "call_category" равно "Курьер/Технический" или "Сотрудничество" или "Неизвестно", то все остальные критерии ("улыбка_в_голосе", "установление_контакта" и т.д., кроме "manager_name") должны быть равны 0 (не применимо).

**Интерпретация оценок (СТРОГО используй только эти значения):**
* **1 (выполнено):** Критерий выполнен полностью, эффективно и согласно всем требованиям.
* **0 (не применимо):** Критерий не применим к данному конкретному диалогу, так как не было соответствующей ситуации или возможности для его выполнения.
* **-1 (не выполнено):** Критерий был необходим, но менеджер его не выполнил, выполнил плохо, проигнорировал или допустил ошибку.

**Критерии для анализа (с детальной логикой оценки):**

1.  **Улыбка в голосе, энергичный тон:**
    * **1 (Выполнено):** Интонация менеджера позитивная, голос энергичный, звучит заинтересованно и доброжелательно на протяжении всего разговора.
    * **0 (Не применимо):** Недостаточно данных для оценки (например, очень короткий или чисто технический звонок).
    * **-1 (Не выполнено):** Голос монотонный, безразличный, уставший, грубый или излишне формальный. Отсутствие эмоциональной вовлеченности.

2.  **Установление контакта:**
    * **1 (Выполнено):** Менеджер активно стремится установить контакт, используя как минимум ДВА из следующих пунктов: 1) Улыбка в голосе, энергичный тон разговора, 2) Называть клиента по имени (если это уместно и доступно), 3) Комплименты (профессионализму клиента, настроению), 4) Подтверждение правильности выбора (например, "Рады вас слышать!", "Вы сделали правильный выбор, обратившись к нам!").
    * **0 (Не применимо)::** Короткий звонок или контекст не предполагал такого взаимодействия.
    * **-1 (Не выполнено):** Менеджер сразу переходит к делу без приветствия, не использует имя клиента, не представляется, или приветствие было сухим/формальным, не используя никаких пунктов для установления контакта. 

3.  **Квалификация (что нужно, когда, сроки, бюджет):**
    * **1 (Выполнено)::** Менеджер задал ВСЕ ТРИ ключевых вопроса на квалификацию:  1) Что именно интересует?, 2) К какой дате подбираете? 3) Есть ли рамки по бюджету?, чтобы собрать исчерпывающую информацию для предложения наилучшего решения.
    * **0 (Не применимо)::** Клиент сам четко и полно озвучил все детали запроса без необходимости уточнения по всем трем пунктам.
    * **-1 (Не выполнено)::** Менеджер задал менее трех вопросов на квалификацию, вопросы неточные, неполные, или сразу перешел к предложению без достаточного понимания ситуации клиента.

4.  **Выявление потребности — какую проблему решает клиент:**
    * **1 (Выполнено):** Менеджер задал БОЛЕЕ ТРЕХ вопросов из списка для глубокого выявления потребностей и мотиваций клиента. Список вопросов: 1) Какой размер смотрите?, 2) Куда выбираете?, 3) Что для вас важно при выборе растения? (Цена, сроки, другие параметры....), 4) Почему именно "такой вариант" хотите?, 5) Первый раз покупаете растение?,  6) Уже знаете как правильно ухаживать за растением?, 7) Вам нужно менее прихотливое растение или это не важно?.
    * **0 (Не применимо)::** Клиент с самого начала четко сформулировал свою проблему и цель покупки, не оставляя места для дальнейшего выявления, или звонок не предполагал глубокого выявления.
    * **-1 (Не выполнено)::** Менеджер задал менее трех вопросов на выявление, или не пытался понять глубинные потребности клиента, ориентировался только на поверхностный запрос, игнорировал сигналы клиента о проблемах.

5.  **Уточнение цели покупки (подарок/себе/офис):** * **1 (Выполнено):** Менеджер явно задал вопрос о цели покупки (например, "Это для вас или в подарок?", "Это для дома или в офис?", "Куда берете растение?"), получив от клиента ответ.
    * **0 (Не применимо):** Критерий не применим к данному конкретному диалогу (например, если клиент сам сказал цель покупки).
    * **-1 (Не выполнено):** Менеджер не задал вопрос о цели покупки, хотя это было уместно для дальнейшей презентации.
    
6. **Последующий уточняющий вопрос (Углубление в цель):**
    * **1 (Выполнено):** Менеджер задал первый вопрос о цели покупки **И** после ответа клиента задал **логичный, углубляющий, второй** уточняющий вопрос (например, если ответ "В дом" -> "В какую комнату?").
    * **0 (Не применимо):** Критерий не применим к данному конкретному диалогу (например, если не было возможности задать второй вопрос или вся информация была получена в одном шаге).
    * **-1 (Не выполнено):** Менеджер не задал первый вопрос о цели покупки **ЛИБО** задал первый, но не последовал **логичным углубляющим** вопросом, даже если это было уместно.

7.  **Пересогласование на основе выявленных потребностей:**
    * **1 (Выполнено):** Менеджер, исходя из всех выявленных потребностей и проблем клиента, САМОСТОЯТЕЛЬНО предлагает КОНКРЕТНОЕ решение или несколько вариантов. При этом презентация решения проводится с применением как минимум ОДНОГО блока презентации (из примеров: преимущества компании, преимущества продукта), привязанного к 2-3 выявленным потребностям или запросам клиента. Также может быть использована как минимум ОДНА история/кейс для усиления ценности.
    * **0 (Не применимо)::** Клиент точно знал, что ему нужно, и не было выявленных потребностей, требующих презентации решения или пересогласования.
    * **-1 (Не выполнено)::** Предложенное решение не соответствует выявленным потребностям, или менеджер не смог сформировать предложение на основе собранной информации, или не использовал блоки презентации/истории, привязанные к потребностям клиента.

8.  **Проговорить особенности позиций:**
    * **1 (Выполнено)::** Менеджер ПРОАКТИВНО и ПОЛНОСТЬЮ рассказывает о специфических свойствах, сложностях ухода, уникальности, условиях выращивания или ограничениях предлагаемых товаров (например, "Этот сорт требует много света и не переносит сквозняков", "Это эксклюзивное растение, доступно в ограниченном количестве", "Нужен особый грунт").
    * **0 (Не применимо)::** Не было позиций с особенностями, требующими дополнительного описания, или клиент уже был полностью осведомлен.
    * **-1 (Не выполнено)::** Менеджер не упомянул важные особенности товара, которые могли бы повлиять на решение или ожидания клиента, или информация была неполной/неясной.

9.  **Возражение клиента — фраза:**
    * **1 (Выполнено):** Клиент четко сформулировал возражение, сомнение, отказ или встречное условие (например, "Это дорого", "Я подумаю", "У меня уже такое было, оно засохло", "Мне не нравится цвет"). Присутствует фраза, подтверждающая наличие возражения.
    * **0 (Не применимо)::** Возражений со стороны клиента не было.
    * **-1 (Не выполнено)::** Возражение клиента было, но менеджер его полностью проигнорировал, не дал клиенту высказаться или перебил его, не зафиксировав возражение.

10.  **Отработка возражения:** (Этот критерий актуален, только если было возражение)
    * **1 (Выполнено)::** Менеджер активно и эффективно работает с возражением, применив формулу работы с возражениями (как минимум ДВЕ ПОПЫТКИ отработки, каждая включает: 1) Уточняющий вопрос, 2) Аргумент, 3) Закрывающий вопрос). По итогу диалога возражение снято или удалось продвинуться дальше по сделке.
    * **0 (Не применимо)::** Возражений не было или они были незначительными, не требующими специальной отработки.
    * **-1 (Не выполнено)::** Штрафуется, только если есть пункт 1 в "Возражение клиента". Менеджер не отработал возражение, отработал его неэффективно (аргументы неубедительны, менеджер спорит с клиентом, не предлагает решения), усугубил возражение или попытка отработки не соответствовала формуле работы с возражениями.
    Если менеджер не отработал возра жение должным образом, то нужно указать в SUMMARY в чем именно была ошибка.

11. **Предложить докомплект:**
    * **1 (Выполнено)::** Менеджер предложил сопутствующие товары (докомплект), логически дополняющие основную покупку (например, кашпо, грунт, пересадка, дренаж), и применил формулу оффера доппродажи: 1) Упомянул, что другие клиенты покупают это дополнительно, 2) Объяснил, почему это нужно/интересно/полезно/выгодно клиенту, 3) Сделал закрытие на покупку (с 2 вариантами выбора).
    * **0 (Не применимо)::** Контекст звонка не предполагал докомплекта (например, клиент уже купил всё необходимое или звонок не дошел до этапа формирования заказа). **ВНИМАНИЕ: Если в заказе уже есть и Растение, и Кашпо, установи 0 (Не применимо).**
    * **-1 (Не выполнено)::** Менеджер упустил возможность предложить докомплект, хотя она была очевидна и уместна, или предложение не соответствовало формуле доппродажи.
    Если менеджер не предложил докомлект должным образом, то нужно указать в SUMMARY в чем именно была ошибка.

12. **Предложить допродажу:**
    * **1 (Выполнено)::** Менеджер предложил дополнительные товары или услуги (допродажу), увеличивающие средний чек, но не являющиеся прямым дополнением к основному товару (например, другие растения, удобрения, освещение, аксессуары, сервисное обслуживание), и применил формулу оффера доппродажи: 1) Упомянул, что другие клиенты покупают это дополнительно, 2) Объяснил, почему это нужно/интересно/полезно/выгодно клиенту, 3) Сделал закрытие на покупку (с 2 вариантами выбора).
    * **-1 (Не выполнено)::** Менеджер не предложил допродажу, хотя такая возможность была очевидна и могла увеличить ценность для клиента, или предложение не соответствовало формуле доппродажи.
    Если менеджер не предложил допродажу должным образом, то нужно указать в SUMMARY в чем именно была ошибка.

13. **Проговорить состав заказа и общую сумму:**
    * **1 (Выполнено)::** Менеджер ЧЕТКО, ПОЛНОСТЬЮ и ОДНОЗНАЧНО озвучивает перечень всех выбранных товаров и ИТОГОВУЮ СУММУ заказа. (Пример: "Итак, в вашем заказе: [позиция1] за [сумма1], [позиция2] за [сумма2], итого к оплате [общая сумма] рублей").
    * **0 (Не применимо)::** Звонок не дошел до этапа формирования заказа.
    * **-1 (Не выполнено)::** Менеджер не озвучил состав заказа, или сумму, или сделал это нечетко/неполно, создав путаницу.

14. **Согласовать детали (адрес; сроки доставки):**
    * **1 (Выполнено)::** Менеджер проактивно подтверждает или уточняет КЛЮЧЕВЫЕ детали завершения сделки: точный адрес доставки (или условия самовывоза), желаемые/возможные сроки доставки/получения, контактные данные, способ связи. Обязательно использована фраза фиксации договоренностей с 2 вариантами на выбор (например, "Тогда договариваемся, что приедете к нам сегодня в 16.00...", "Отлично, придержу за вами растения, к концу дня буду ждать оплату...").
    * **0 (Не применимо)::** Звонок завершился до этапа согласования деталей (например, клиент отказался или прервал звонок до этого этапа).
    * **-1 (Не выполнено)::** Менеджер не уточнил или упустил важные детали, необходимые для организации доставки/получения заказа, или эти детали были согласованы неясно, или не зафиксировал договоренности.

15. **Проговорить про предоплату по схеме: дедлайн + причина:**
    * **1 (Выполнено)::** Менеджер четко объясняет УСЛОВИЯ предоплаты: устанавливает конкретный дедлайн (например, "оплатите в течение часа", "сегодня до конца рабочего дня") и ОБЯЗАТЕЛЬНО ОБЪЯСНЯЕТ причину (например, "это необходимо для бронирования растения, так как бирочки вешаем только после предоплаты", "для подтверждения заказа и передачи его в сборку"). Может быть использован дедлайн-бонус для стимулирования оплаты.
    * **0 (Не применимо)::** Условия сделки не предусматривали предоплаты.
    * **-1 (Не выполнено)::** Менеджер не проговорил про предоплату, проговорил нечетко, без дедлайна или без объяснения причины, не смог ответить на вопросы по предоплате, или упустил возможность применения дедлайн-бонуса при его уместности.

Также, если Менеджер представился, укажи его имя отдельным полем "manager_name" в конце JSON-ответа. **Используй только имена из предоставленного списка. Это очень важно для корректной аналитики. Имя должно быть строго из списка. Если имя не найдено, укажи "Неизвестно".**
Не путай, когда представился менеджер, а когда он назвал имя клиента.

**Вот список всех возможных имен менеджеров, используй их точно как указано:**
{}

**Формат ответа:**
Строго JSON формат для оценок критериев, имени менеджера и категории звонка. После JSON блока должна быть строка `---SUMMARY---`, а затем краткое резюме звонка с ключевыми выводами для РОПа (не более 1600 символов).

**Инструкции для резюме (summary):**
Резюме должно быть структурированным и содержать ключевые выводы для РОПа, отвечая на следующие вопросы. Используй HTML-тег `<b>` для выделения заголовков жирным жирным шрифтом и разделяй каждый пункт пустой строкой, чтобы улучшить читаемость.
* <b>Исход звонка:</b> Чем закончился разговор (обратная связь позже, заказ, отказ, визит в шоурум, запрос информации и т.д.).
* <b>Квалификация:</b> Какие вопросы менеджер задал по квалификации (например, по бюджету, срокам) или почему не задал.
* <b>Выявление потребностей:</b> Какие вопросы менеджер задал для выявления потребностей клиента или почему не задал.
* <b>Презентация:</b> Как менеджер презентовал решение, что именно рассказал о продукте/компании.
* <b>Пересогласование:</b> Пытался ли менеджер пересогласовать решение на основе выявленных потребностей, и с каким результатом.
* <b>Возражения клиента:</b> Если были, пропиши текстом, что сказал клиент.
* <b>Отработка возражений:</b> Если были возражения, что говорил менеджер при их отработке.
* <b>Результат отработки возражений:</b> Клиент согласился или отказался после отработки возражения.
* <b>Дополнительные продажи (докомплект/допродажа):</b> Были ли предложены докомплект/допродажа, и если нет, то почему упущена возможность.
* <b>Договоренности:</b> Какие договоренности менеджер установил с клиентом (например, о доставке, оплате).
* <b>Следующий шаг:</b> Какие следующие шаги были обозначены менеджером или почему не были обозначены.
* <b>Общие рекомендации:</b> Что можно улучшить в работе менеджера (конкретные рекомендации по развитию навыков или подходов).

Пример JSON:
{{
  "call_category": "Заказ",
  "улыбка_в_голосе": 1,
  "установление_контакта": 1,
  "квалификация": 0,
  "выявление_потребности": 1,
  "goal_clarified": 1,
  "последующий_уточняющий": 1,
  "пересогласование": 1,
  "особенности_позиций": 0,
  "возражение": 1,
  "отработка_возражения": 1,
  "докомплект": 0,
  "допродажа": 0,
  "состав_и_сумма": 1,
  "согласование_деталей": 1,
  "предоплата": 1,
  "manager_name": "Ольга"
}}
---SUMMARY---
* <b>Исход звонка:</b> Разговор завершился оформлением заказа и согласованием условий доставки и предоплаты.

* <b>Квалификация:</b> Менеджер не задал вопросы по бюджету и срокам.

* <b>Выявление потребностей:</b> Менеджер не задал вопросов для выявления потребностей клиента.

* <b>Презентация:</b> Менеджер кратко рассказал о характеристиках товара, но не привязал их к потребностям клиента.

* <b>Пересогласование:</b> Менеджер не пытался пересогласовать решение.

* <b>Возражения клиента:</b> Клиент сказал: "Это слишком дорого".

* <b>Отработка возражений:</b> Менеджер предложил рассмотреть более бюджетные варианты.

* <b>Результат отработки возражений:</b> Клиент согласился рассмотреть предложенные варианты.

* <b>Дополнительные продажи (докомплект/допродажа):</b> Возможность допродажи была упущена, так как менеджер не предложил сопутствующие товары.

* <b>Договоренности:</b> Установлены договоренности о доставке на следующий день и предоплате.

* <b>Следующий шаг:</b> Менеджер обозначил следующий шаг - ожидание предоплаты и отправка реквизитов.

* <b>Общие рекомендации:</b> Рекомендуется улучшить навыки установления контакта, задавать больше вопросов для понимания потребностей клиента и предлагать дополнительные товары для увеличения среднего чека.
Текст звонка для анализа:
"""
{transcript}
"""
'''


def clean_json_string(raw_content):
    """
    Извлекает JSON-строку из ответа модели, находя первый '{' и последний '}'.
    """
    first_brace = raw_content.find('{')
    last_brace = raw_content.rfind('}')

    if first_brace != -1 and last_brace != -1 and last_brace > first_brace:
        return raw_content[first_brace: last_brace + 1]
    return '{}'


def extract_summary(raw_content):
    """
    Извлекает резюме из ответа модели, которое находится после разделителя ---SUMMARY---.
    """
    # Ищем текст после последнего "---SUMMARY---"
    match = re.search(r'---SUMMARY---\s*([\s\S]*)', raw_content)
    return match.group(1).strip() if match else ''


# Функция categorize_call_by_metadata оставлена без изменений, так как она не влияет на логику анализа LLM/CRM
def categorize_call_by_metadata(raw_call_data: dict) -> str:
    """
    Категоризирует звонок на основе его метаданных (направления и длительности).
    """
    direction = raw_call_data.get("direction")
    duration = raw_call_data.get("duration")

    # Если звонок очень короткий (менее 10 секунд) и исходящий,
    # вероятно, это технический звонок или пропущенный
    if direction == "out" and duration is not None and duration < 10:
        return "Курьер/Технический"

    # По умолчанию, если нет явных признаков, считаем "Заказ"
    return "Заказ"


def analyze_single_transcript(transcript_path: Path, target_folder_date_str: str, initial_category: str,
                              phone_number: str | None = None):
    """
    Проводит анализ одного транскрипта и сохраняет результат в виде JSON-файла.
    """
    output_folder = Path("analyses") / f"транскрибация_{target_folder_date_str}"
    os.makedirs(output_folder, exist_ok=True)

    filename = transcript_path.name
    with open(transcript_path, "r", encoding="utf-8") as f:
        transcript = f.read()

    # Форматируем PROMPT_TEMPLATE
    prompt = PROMPT_TEMPLATE.format(
        ", ".join(CALL_CATEGORIES),
        ", ".join(ALLOWED_MANAGERS),
        transcript=transcript
    )

    success = False
    # Инициализация словаря с новым критерием
    filtered_result = {key: 0 for key in CRITERIA}
    filtered_result["manager_name"] = "Неизвестно"
    filtered_result["summary"] = ""
    filtered_result["call_category"] = initial_category

    # --- НОВЫЙ БЛОК: Поиск ссылки на заказ и статуса позиций ---
    order_link = ""
    items_status = {'has_plant': False, 'has_cachepot': False}  # Инициализация

    if phone_number:
        print(f"🔗 Поиск ссылки на заказ и статуса позиций для номера: {phone_number}...")
        order_link = get_order_link_by_phone(phone_number)
        items_status = get_order_items_status(phone_number)  # ВЫЗОВ НОВОЙ ФУНКЦИИ
        print(f"🔗 Результат: {order_link or 'Не найдена'}. Статус позиций: {items_status}")
    else:
        print("🔗 Номер телефона не найден. Пропускаем поиск ссылки на заказ и статуса позиций.")
    # --- КОНЕЦ НОВОГО БЛОКА ---

    for attempt in range(3):
        try:
            response = client.chat.completions.create(
                model="gpt-5-mini",
                messages=[{"role": "user", "content": prompt}],
            )
            raw_content = response.choices[0].message.content
            json_str = clean_json_string(raw_content)
            result_dict = json.loads(json_str)

            call_category_from_llm = result_dict.get("call_category")
            if call_category_from_llm in CALL_CATEGORIES:
                filtered_result["call_category"] = call_category_from_llm
            else:
                print(
                    f"⚠️ Неизвестная категория звонка от LLM: {call_category_from_llm}. Используется начальная категория: {initial_category}.")
                filtered_result["call_category"] = initial_category

            analysis_summary = extract_summary(raw_content)
            if not analysis_summary:
                print(f"⚠️ Резюме для {filename} пустое.")
                analysis_summary = "Резюме не сгенерировано."

            if filtered_result["call_category"] != "Заказ":
                for key in CRITERIA:
                    filtered_result[key] = 0
                print(
                    f"ℹ️ Звонок {filename} определен как '{filtered_result['call_category']}'. Критерии анализа продаж установлены в 0.")
            else:
                for key in CRITERIA:
                    score = result_dict.get(key)
                    # Проверка на наличие поля goal_clarified в result_dict
                    if key == "goal_clarified" and score is None:
                        # Если LLM не вернул новое поле, устанавливаем 0
                        score = 0

                    if score in [1, 0, -1]:
                        filtered_result[key] = score
                    else:
                        print(f"⚠️ Некорректный балл {score} для критерия '{key}' в файле {filename}. Устанавливаем 0.")
                        filtered_result[key] = 0

                # --- ЛОГИКА ПРИНУДИТЕЛЬНОГО УСТАНОВЛЕНИЯ "ДОКОМПЛЕКТ" В 0 ---
                if items_status['has_plant'] and items_status['has_cachepot']:
                    # Если в заказе уже есть и растение, и кашпо, то докомплект не применим
                    filtered_result["докомплект"] = 0
                    print(f"✅ Принудительное присвоение 'докомплект'=0 для {filename}: Растение и Кашпо уже в заказе.")
                # --- КОНЕЦ ЛОГИКИ ПРИНУДИТЕЛЬНОГО УСТАНОВЛЕНИЯ "ДОКОМПЛЕКТ" В 0 ---

            manager_name_from_llm = result_dict.get("manager_name")
            if manager_name_from_llm in ALLOWED_MANAGERS:
                filtered_result["manager_name"] = manager_name_from_llm
            else:
                filtered_result["manager_name"] = "Неизвестно"

            filtered_result["summary"] = analysis_summary
            success = True
            break
        except json.JSONDecodeError as e:
            print(f"⚠️ Ошибка JSON декодирования для {filename} (попытка {attempt + 1}): {e}")
            print(f"Сырой контент (начало): {raw_content[:500]}...")
            time.sleep(2)
        except Exception as e:
            print(f"⚠️ Непредвиденная ошибка при генерации/парсинге для {filename} (попытка {attempt + 1}): {e}")
            time.sleep(2)

    if filtered_result["manager_name"] == "Неизвестно" and phone_number:
        print(f"ℹ️ Имя менеджера не определено LLM. Пытаемся получить из CRM для номера: {phone_number}")
        crm_manager_name = get_manager_name_from_crm(phone_number)
        if crm_manager_name and crm_manager_name in ALLOWED_MANAGERS:
            filtered_result["manager_name"] = crm_manager_name
            print(f"✅ Имя менеджера успешно получено из CRM: {crm_manager_name}")
        else:
            print("ℹ️ Не удалось получить имя менеджера из CRM.")

    if not success:
        fail_path = output_folder / f"{filename.replace('.txt', '')}_raw.txt"
        with open(fail_path, "w", encoding="utf-8") as f:
            f.write(transcript)
        print(f"❌ Не удалось проанализировать: {filename} — исходный транскрипт сохранён как {fail_path}")
        if filtered_result["manager_name"] == "Неизвестно":
            filtered_result["manager_name"] = "Неизвестно"
        filtered_result["summary"] = "Ошибка анализа: не удалось сгенерировать корректные данные."
        filtered_result["call_category"] = "Неизвестно"
        for key in CRITERIA:
            filtered_result[key] = 0

    if filtered_result["call_category"] != "Курьер/Технический":
        out_path = output_folder / f"{transcript_path.stem}_analysis.json"

        # Добавляем order_link и items_status в данные, которые будут сохранены в JSON
        final_analysis_data = filtered_result.copy()
        final_analysis_data["order_link"] = order_link
        final_analysis_data["order_items_status"] = items_status  # Добавление статуса позиций

        with open(out_path, "w", encoding="utf-8") as f:
            json.dump(final_analysis_data, f, ensure_ascii=False, indent=2)
        print(f"✅ Анализ сохранён: {out_path}")
    else:
        print(f"⏩ Звонок {filename} определен как 'Курьер/Технический'. Анализ не сохранен.")


def analyze_transcripts(target_date_str: str):
    """
    Проводит анализ всех транскриптов в указанной папке
    и сохраняет результаты в виде JSON-файлов.

    Args:
        target_date_str (str): Дата, за которую нужно анализировать транскрипты, в формате "ДД.ММ.ГГГГ".
    """
    transcripts_folder = Path("transcripts") / f"транскрибация_{target_date_str}"
    audio_calls_folder = Path("audio") / f"звонки_{target_date_str}"  # Добавляем путь к папке с аудио-информацией

    if not transcripts_folder.exists():
        print(f"Папка с транскриптами не найдена: {transcripts_folder}. Пропускаем анализ.")
        return

    print(f"Начинаем анализ транскриптов из папки: {transcripts_folder}")

    for filename in os.listdir(transcripts_folder):
        if filename.endswith(".txt") and not filename.endswith("_raw.txt"):
            transcript_path = transcripts_folder / filename
            base_name = filename.replace(".txt", "")

            # Извлекаем номер телефона из имени файла транскрипции
            # Пример имени файла: call123_79001234567.txt
            phone_number_match = re.search(r'call\d+_(\d+)', base_name)
            phone_number_from_filename = phone_number_match.group(1) if phone_number_match else None

            # Попытка загрузить call_info.json для получения raw данных и начальной категории
            initial_category = "Неизвестно"
            info_path = audio_calls_folder / f"{base_name}_call_info.json"
            if info_path.exists():
                try:
                    with open(info_path, "r", encoding="utf-8") as f:
                        call_info = json.load(f)
                        raw_call_data = call_info.get("raw", {})
                        initial_category = categorize_call_by_metadata(raw_call_data)
                except json.JSONDecodeError as e:
                    print(f"Ошибка декодирования JSON для {info_path}: {e}")
                except Exception as e:
                    print(f"Ошибка при чтении или обработке {info_path}: {e}")
            else:
                print(
                    f"Предупреждение: Файл информации о звонке не найден для {base_name}: {info_path}. Используем категорию по умолчанию.")

            print(f"  Анализируем: {filename} (Начальная категория: {initial_category})")
            # Передаем извлеченный номер телефона в analyze_single_transcript
            analyze_single_transcript(transcript_path, target_date_str, initial_category, phone_number_from_filename)

    print(f"Анализ транскриптов для {target_date_str} завершен.")


# УДАЛЕНИЕ: Функция test_openai_api удалена, так как она больше не нужна.

# ТЕСТОВЫЙ БЛОК, ИМИТИРУЮЩИЙ РАБОТУ ОСНОВНОГО ПАЙПЛАЙНА
if __name__ == "__main__":
    TEST_TRANSCRIPT = """Менеджер: Добрый день. Это магазин «Тропик Хаус». Меня зовут Настасья. Я чем могу помочь?  
Клиент: Здравствуйте, девушка. Я сегодня сейчас только что сделала заказ.  
Менеджер: Угу.  
Клиент: И проспела бы прям доставку максимально быстро. Скажите, пожалуйста, как это можно сделать?  
Менеджер: Так, секунду. Подскажите, как вас зовут?  
Клиент: Карина.  
Менеджер: Угу. Карина, очень приятно. Так, сейчас посмотрим ваш заказ. Секундочку.  
Клиент: Угу.  """

    TEST_FILENAME = "test_call_12345_79001112233.txt"
    TEST_DATE_STR = datetime.today().strftime("%d.%m.%Y")

    # 1. Создание тестовой папки и файла
    temp_transcripts_folder = Path("transcripts") / f"транскрибация_{TEST_DATE_STR}"
    os.makedirs(temp_transcripts_folder, exist_ok=True)
    temp_transcript_path = temp_transcripts_folder / TEST_FILENAME

    with open(temp_transcript_path, "w", encoding="utf-8") as f:
        f.write(TEST_TRANSCRIPT)

    # 2. Имитация запуска анализа
    print("--- ЗАПУСК ТЕСТОВОГО АНАЛИЗА ---")

    # Извлекаем номер и начальную категорию для теста
    test_phone = "79001112233"
    test_initial_category = "Заказ"  # Устанавливаем вручную для имитации, что это не короткий звонок

    analyze_single_transcript(
        transcript_path=temp_transcript_path,
        target_folder_date_str=TEST_DATE_STR,
        initial_category=test_initial_category,
        phone_number=test_phone
    )

    # 3. Очистка тестовых файлов (по желанию, для чистоты)
    # temp_transcript_path.unlink()
    # temp_transcripts_folder.rmdir()

    print("--- ТЕСТОВЫЙ АНАЛИЗ ЗАВЕРШЕН ---")