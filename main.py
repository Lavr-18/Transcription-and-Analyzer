import os
import sys
import shutil
import json
from datetime import datetime, timedelta, timezone
from pathlib import Path
import re
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).resolve().parent
if str(project_root) not in sys.path:
    sys.path.append(str(project_root))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from uis_call_downloader import get_calls_report, download_calls
from transcriber import transcribe_all
from analyzer import analyze_transcripts
from google_sheets import send_analyses_to_google_form
from retailcrm_integration import check_if_phone_has_excluded_order, check_if_phone_has_recent_order, \
    get_order_link_by_phone

# Define Moscow timezone (UTC+3)
MSK = timezone(timedelta(hours=3))


def clean_old_folders(base_dir: Path, days_to_keep: int):
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    """
    print(f"\nüßπ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –ø–∞–ø–æ–∫ –≤ {base_dir} (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_to_keep} –¥–Ω–µ–π)...")
    current_time_msk = datetime.now(MSK)
    cutoff_date = (current_time_msk - timedelta(days=days_to_keep)).date()
    if not base_dir.exists():
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {base_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É.")
        return
    for folder in base_dir.iterdir():
        if folder.is_dir():
            try:
                date_str_part = folder.name.split('_')[-1]
                folder_date = datetime.strptime(date_str_part, "%d.%m.%Y").date()
                if folder_date < cutoff_date:
                    print(
                        f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É: {folder} (–¥–∞—Ç–∞ {folder_date.strftime('%d.%m.%Y')} —Å—Ç–∞—Ä—à–µ {cutoff_date.strftime('%d.%m.%Y')})")
                    shutil.rmtree(folder)
                else:
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–ø–∫—É: {folder} (–¥–∞—Ç–∞ {folder_date.strftime('%d.%m.%Y')})")
            except ValueError:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É {folder.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {folder.name}: {e}")
    print(f"–û—á–∏—Å—Ç–∫–∞ –≤ {base_dir} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


def send_all_analyses_to_integrations(analyses_folder_path: Path, target_folder_date_str: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JSON-—Ñ–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ Google Forms.
    """
    print("\n--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ Google Forms (–∏ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ) ---")
    if not analyses_folder_path.exists():
        print(f"–ü–∞–ø–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {analyses_folder_path}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.")
        return
    print(f"\n  ‚û°Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ Google Forms –∏–∑ {analyses_folder_path}.")
    send_analyses_to_google_form(analyses_folder_path, target_folder_date_str)


def run_processing_pipeline():
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
    –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–°–ö –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω.
    """
    current_time_msk = datetime.now(MSK)
    current_hour_msk = current_time_msk.hour
    current_date_msk = current_time_msk.date()

    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö: {current_time_msk.strftime('%Y-%m-%d %H:%M:%S')}")

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏
    clean_old_folders(Path("audio"), 1)
    clean_old_folders(Path("transcripts"), 1)
    clean_old_folders(Path("analyses"), 1)

    start_time_period = None
    end_time_period = None
    target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    if current_hour_msk == 12:
        yesterday_date_msk = current_date_msk - timedelta(days=1)
        print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: —É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–≤–æ–Ω–∫–∏ (—Å –≤–µ—á–µ—Ä–∞ –≤—á–µ—Ä–∞ –¥–æ –ø–æ–ª—É–¥–Ω—è —Å–µ–≥–æ–¥–Ω—è)")
        start_time_period = datetime.combine(yesterday_date_msk, datetime.min.time().replace(hour=19), tzinfo=MSK)
        end_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=11, minute=59, second=59),
                                           tzinfo=MSK)
        target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")

    elif current_hour_msk == 15:
        print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–Ω–µ–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ (—Å –ø–æ–ª—É–¥–Ω—è —Å–µ–≥–æ–¥–Ω—è –¥–æ 15:00 —Å–µ–≥–æ–¥–Ω—è)")
        start_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=12), tzinfo=MSK)
        end_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=14, minute=59, second=59),
                                           tzinfo=MSK)
        target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")

    elif current_hour_msk == 19:
        print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –≤–µ—á–µ—Ä–Ω–∏–µ –∑–≤–æ–Ω–∫–∏ (—Å 15:00 —Å–µ–≥–æ–¥–Ω—è –¥–æ 19:00 —Å–µ–≥–æ–¥–Ω—è)")
        start_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=15), tzinfo=MSK)
        end_time_period = datetime.combine(current_time_msk, datetime.min.time().replace(hour=18, minute=59, second=59),
                                           tzinfo=MSK)
        target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")
    else:
        print(
            "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ (12:00, 15:00, 19:00 –ú–°–ö). –ü—Ä–æ–ø—É—Å–∫–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        return

    if start_time_period and end_time_period:
        print(
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_time_period.strftime('%Y-%m-%d %H:%M:%S')} - {end_time_period.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {target_folder_date_str}")

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê ---
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ)
        print("\n--- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ ---")
        calls = get_calls_report(start_time_period.strftime("%Y-%m-%d %H:%M:%S"),
                                 end_time_period.strftime("%Y-%m-%d %H:%M:%S"))

        if not calls:
            print("‚ÑπÔ∏è –ù–µ—Ç –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ.")
            print("\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            return

        # 2. –§–∏–ª—å—Ç—Ä—É–µ–º –∑–≤–æ–Ω–∫–∏ –ø–æ –Ω–æ–≤—ã–º –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞–º
        print("\n--- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –±–∏–∑–Ω–µ—Å–∞ ---")
        calls_to_process = []
        for call in calls:
            phone_number = call.get("contact_phone_number")
            call_direction = call.get("raw", {}).get("direction")
            if not phone_number or not call_direction:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {call.get('communication_id')}")
                continue

            # –ü—Ä–∞–≤–∏–ª–æ 1: –í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏
            if call_direction == "in":
                if not check_if_phone_has_excluded_order(phone_number):
                    print(f"‚úÖ –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —Å –Ω–æ–º–µ—Ä–∞ {phone_number} –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä (–Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤).")
                    calls_to_process.append(call)
                else:
                    print(f"‚ùå –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —Å –Ω–æ–º–µ—Ä–∞ {phone_number} –ù–ï –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä (–µ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å).")

            # –ü—Ä–∞–≤–∏–ª–æ 2: –ò—Å—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏
            elif call_direction == "out":
                if check_if_phone_has_recent_order(phone_number):
                    print(f"‚úÖ –ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä {phone_number} –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä (–µ—Å—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–π –∑–∞–∫–∞–∑).")
                    calls_to_process.append(call)
                else:
                    print(f"‚ùå –ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä {phone_number} –ù–ï –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä (–Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞).")

        print(f"‚û°Ô∏è –ò—Ç–æ–≥–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(calls_to_process)} –∑–≤–æ–Ω–∫–æ–≤.")
        if not calls_to_process:
            print("–ù–µ—Ç –∑–≤–æ–Ω–∫–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
            print("\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            return

        # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
        audio_dir = Path("audio") / f"–∑–≤–æ–Ω–∫–∏_{target_folder_date_str}"
        audio_dir.mkdir(parents=True, exist_ok=True)
        print("\n--- –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ ---")
        downloaded_call_info_paths = download_calls(calls_to_process, audio_dir)
        print(f"–°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ –∞—É–¥–∏–æ: {audio_dir.exists()} (—Å–æ–¥–µ—Ä–∂–∏—Ç {len(list(audio_dir.glob('*.mp3')))} mp3 —Ñ–∞–π–ª–æ–≤)")

        # 4. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑
        if downloaded_call_info_paths:
            print("\n--- –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤ ---")
            transcribe_all(target_folder_date_str, assign_roles=True)
            transcripts_dir = Path("transcripts") / f"—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è_{target_folder_date_str}"
            print(
                f"–°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤: {transcripts_dir.exists()} (—Å–æ–¥–µ—Ä–∂–∏—Ç {len(list(transcripts_dir.glob('*.txt')))} txt —Ñ–∞–π–ª–æ–≤)")

            print("\n--- –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ ---")
            analyze_transcripts(target_folder_date_str)
            analyses_dir = Path("analyses") / f"—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è_{target_folder_date_str}"
            print(
                f"–°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤: {analyses_dir.exists()} (—Å–æ–¥–µ—Ä–∂–∏—Ç {len(list(analyses_dir.glob('*_analysis.json')))} json —Ñ–∞–π–ª–æ–≤)")

            # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤
            send_all_analyses_to_integrations(analyses_dir, target_folder_date_str)

    print("\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    run_processing_pipeline()
    print("\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")


# import os
# import sys
# import shutil
# import json
# from datetime import datetime, timedelta, timezone
# from pathlib import Path
# import re
# import time
#
# # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Ç–∞–º.
# project_root = Path(__file__).resolve().parent
# if str(project_root) not in sys.path:
#     sys.path.append(str(project_root))
#
# # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
# # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# from uis_call_downloader import download_calls, MSK
# from transcriber import transcribe_all
# from analyzer import analyze_transcripts
# from google_sheets import send_analyses_to_google_form
#
# def clean_old_folders(base_dir: Path, days_to_keep: int):
#     """
#     –£–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –¥–∞—Ç–∞ —Å—Ç–∞—Ä—à–µ,
#     —á–µ–º days_to_keep –¥–Ω–µ–π (—Å—á–∏—Ç–∞—è –ø–æ –¥–∞—Ç–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏).
#     """
#     print(f"\nüßπ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –ø–∞–ø–æ–∫ –≤ {base_dir} (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_to_keep} –¥–Ω–µ–π)...")
#
#     current_time_msk = datetime.now(MSK)
#     cutoff_date = (current_time_msk - timedelta(days=days_to_keep)).date()
#
#     if not base_dir.exists():
#         print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {base_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É.")
#         return
#
#     for folder in base_dir.iterdir():
#         if folder.is_dir():
#             try:
#                 # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "–∑–≤–æ–Ω–∫–∏_07.08.2025"
#                 date_str_part = folder.name.split('_')[-1]
#                 folder_date = datetime.strptime(date_str_part, "%d.%m.%Y").date()
#
#                 if folder_date < cutoff_date:
#                     print(
#                         f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É: {folder} (–¥–∞—Ç–∞ {folder_date.strftime('%d.%m.%Y')} —Å—Ç–∞—Ä—à–µ {cutoff_date.strftime('%d.%m.%Y')})")
#                     shutil.rmtree(folder)
#                 else:
#                     print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–ø–∫—É: {folder} (–¥–∞—Ç–∞ {folder_date.strftime('%d.%m.%Y')})")
#             except ValueError:
#                 print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É {folder.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
#             except Exception as e:
#                 print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {folder.name}: {e}")
#     print(f"–û—á–∏—Å—Ç–∫–∞ –≤ {base_dir} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
#
#
# def send_all_analyses_to_integrations(analyses_folder_path: Path, target_folder_date_str: str):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JSON-—Ñ–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–æ–≤
#     –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Google Forms. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
#     –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑ –º–æ–¥—É–ª—è google_sheets –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
#     """
#     print("\n--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ Google Forms (–∏ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ google_sheets) ---")
#
#     if not analyses_folder_path.exists():
#         print(f"–ü–∞–ø–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {analyses_folder_path}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.")
#         return
#
#     print(f"\n  ‚û°Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ Google Forms –∏–∑ {analyses_folder_path}.")
#     send_analyses_to_google_form(analyses_folder_path, target_folder_date_str)
#
#
# def run_processing_pipeline():
#     """
#     –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
#     –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–°–ö –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω.
#     """
#     current_time_msk = datetime.now(MSK)
#     current_hour_msk = current_time_msk.hour
#     current_date_msk = current_time_msk.date()
#
#     print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö: {current_time_msk.strftime('%Y-%m-%d %H:%M:%S')}")
#
#     # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏
#     clean_old_folders(Path("audio"), 1)
#     clean_old_folders(Path("transcripts"), 1)
#     clean_old_folders(Path("analyses"), 1)
#
#     start_time_period = None
#     end_time_period = None
#     target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")
#
#     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
#     if current_hour_msk == 12:
#         yesterday_date_msk = current_date_msk - timedelta(days=1)
#         print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: —É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–≤–æ–Ω–∫–∏ (—Å –≤–µ—á–µ—Ä–∞ –≤—á–µ—Ä–∞ –¥–æ –ø–æ–ª—É–¥–Ω—è —Å–µ–≥–æ–¥–Ω—è)")
#         start_time_period = datetime.combine(yesterday_date_msk, datetime.min.time().replace(hour=19), tzinfo=MSK)
#         end_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=11, minute=59, second=59),
#                                            tzinfo=MSK)
#         target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")
#
#     elif current_hour_msk == 15: # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë—ã–ª–æ 17, —Ç–µ–ø–µ—Ä—å 15, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—é
#         print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–Ω–µ–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ (—Å –ø–æ–ª—É–¥–Ω—è —Å–µ–≥–æ–¥–Ω—è –¥–æ 15:00 —Å–µ–≥–æ–¥–Ω—è)")
#         start_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=12), tzinfo=MSK)
#         end_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=14, minute=59, second=59),
#                                            tzinfo=MSK)
#         target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")
#
#     elif current_hour_msk == 19:
#         print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –≤–µ—á–µ—Ä–Ω–∏–µ –∑–≤–æ–Ω–∫–∏ (—Å 15:00 —Å–µ–≥–æ–¥–Ω—è –¥–æ 19:00 —Å–µ–≥–æ–¥–Ω—è)")
#         start_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=15), tzinfo=MSK)
#         end_time_period = datetime.combine(current_time_msk, datetime.min.time().replace(hour=18, minute=59, second=59),
#                                            tzinfo=MSK)
#         target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")
#     else:
#         # –≠—Ç–∞ –≤–µ—Ç–∫–∞ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ cron –∑–∞–ø—É—Å—Ç–∏—Ç —Å–∫—Ä–∏–ø—Ç –Ω–µ –≤ 12, 15 –∏–ª–∏ 19 —á–∞—Å–æ–≤.
#         # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é –≤ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.
#         print(
#             "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ (12:00, 15:00, 19:00 –ú–°–ö). –ü—Ä–æ–ø—É—Å–∫–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
#         return # –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
#
#     if start_time_period and end_time_period:
#         print(
#             f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_time_period.strftime('%Y-%m-%d %H:%M:%S')} - {end_time_period.strftime('%Y-%m-%d %H:%M:%S')}")
#         print(f"–¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {target_folder_date_str}")
#
#         # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤–æ–Ω–∫–æ–≤
#         print("\n--- –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ ---")
#         download_calls(start_time_period, end_time_period)
#         audio_dir = Path("audio") / f"–∑–≤–æ–Ω–∫–∏_{target_folder_date_str}"
#         print(f"–°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ –∞—É–¥–∏–æ: {audio_dir.exists()} (—Å–æ–¥–µ—Ä–∂–∏—Ç {len(list(audio_dir.glob('*.mp3')))} mp3 —Ñ–∞–π–ª–æ–≤)")
#
#         # 2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤ (–≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö)
#         print("\n--- –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤ ---")
#         transcribe_all(target_folder_date_str, assign_roles=True)
#         transcripts_dir = Path("transcripts") / f"—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è_{target_folder_date_str}"
#         print(f"–°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤: {transcripts_dir.exists()} (—Å–æ–¥–µ—Ä–∂–∏—Ç {len(list(transcripts_dir.glob('*.txt')))} txt —Ñ–∞–π–ª–æ–≤)")
#
#         # 3. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ (analyzer.py —Å–∞–º —Ä–µ—à–∏—Ç, –∫–∞–∫–∏–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å)
#         print("\n--- –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ ---")
#         analyze_transcripts(target_folder_date_str)
#         analyses_dir = Path("analyses") / f"—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è_{target_folder_date_str}"
#         print(f"–°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤: {analyses_dir.exists()} (—Å–æ–¥–µ—Ä–∂–∏—Ç {len(list(analyses_dir.glob('*_analysis.json')))} json —Ñ–∞–π–ª–æ–≤)")
#
#         # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ Google Forms (–∏ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ google_sheets)
#         send_all_analyses_to_integrations(analyses_dir, target_folder_date_str)
#
#     print("\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")
#
#
# if __name__ == "__main__":
#     print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
#     run_processing_pipeline()
#     print("\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")















# import os
# import sys
# import shutil
# import json
# from datetime import datetime, timedelta, timezone
# from pathlib import Path
# import re
# import time
#
# # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Ç–∞–º.
# project_root = Path(__file__).resolve().parent
# if str(project_root) not in sys.path:
#     sys.path.append(str(project_root))
#
# # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
# from uis_call_downloader import download_calls, MSK
# from transcriber import transcribe_all
# from analyzer import analyze_transcripts
# from google_sheets import send_analyses_to_google_form
#
# def clean_old_folders(base_dir: Path, days_to_keep: int):
#     """
#     –£–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –¥–∞—Ç–∞ —Å—Ç–∞—Ä—à–µ,
#     —á–µ–º days_to_keep –¥–Ω–µ–π (—Å—á–∏—Ç–∞—è –ø–æ –¥–∞—Ç–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏).
#     """
#     print(f"\nüßπ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –ø–∞–ø–æ–∫ –≤ {base_dir} (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_to_keep} –¥–Ω–µ–π)...")
#
#     current_time_msk = datetime.now(MSK)
#     cutoff_date = (current_time_msk - timedelta(days=days_to_keep)).date()
#
#     if not base_dir.exists():
#         print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {base_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É.")
#         return
#
#     for folder in base_dir.iterdir():
#         if folder.is_dir():
#             try:
#                 date_str_part = folder.name.split('_')[-1]
#                 folder_date = datetime.strptime(date_str_part, "%d.%m.%Y").date()
#
#                 if folder_date < cutoff_date:
#                     print(
#                         f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É: {folder} (–¥–∞—Ç–∞ {folder_date.strftime('%d.%m.%Y')} —Å—Ç–∞—Ä—à–µ {cutoff_date.strftime('%d.%m.%Y')})")
#                     shutil.rmtree(folder)
#                 else:
#                     print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–ø–∫—É: {folder} (–¥–∞—Ç–∞ {folder_date.strftime('%d.%m.%Y')})")
#             except ValueError:
#                 print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É {folder.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
#             except Exception as e:
#                 print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {folder.name}: {e}")
#     print(f"–û—á–∏—Å—Ç–∫–∞ –≤ {base_dir} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
#
#
# def send_all_analyses_to_integrations(analyses_folder_path: Path, target_folder_date_str: str):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JSON-—Ñ–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–æ–≤
#     –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Google Forms. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
#     –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑ –º–æ–¥—É–ª—è google_sheets –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
#     """
#     print("\n--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ Google Forms (–∏ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ google_sheets) ---")
#
#     if not analyses_folder_path.exists():
#         print(f"–ü–∞–ø–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {analyses_folder_path}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.")
#         return
#
#     print(f"\n  ‚û°Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ Google Forms –∏–∑ {analyses_folder_path}.")
#     send_analyses_to_google_form(analyses_folder_path, target_folder_date_str)
#
#
# def run_processing_pipeline():
#     """
#     –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
#     –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–°–ö –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω.
#     """
#     current_time_msk = datetime.now(MSK)
#     current_hour_msk = current_time_msk.hour
#     current_date_msk = current_time_msk.date()
#
#     print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö: {current_time_msk.strftime('%Y-%m-%d %H:%M:%S')}")
#
#     clean_old_folders(Path("audio"), 2)
#     clean_old_folders(Path("transcripts"), 2)
#     clean_old_folders(Path("analyses"), 2)
#
#     start_time_period = None
#     end_time_period = None
#     target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")
#
#     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
#     if current_hour_msk == 12:
#         yesterday_date_msk = current_date_msk - timedelta(days=1)
#         print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: —É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–≤–æ–Ω–∫–∏ (—Å –≤–µ—á–µ—Ä–∞ –≤—á–µ—Ä–∞ –¥–æ –ø–æ–ª—É–¥–Ω—è —Å–µ–≥–æ–¥–Ω—è)")
#         start_time_period = datetime.combine(yesterday_date_msk, datetime.min.time().replace(hour=19), tzinfo=MSK)
#         end_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=11, minute=59, second=59),
#                                            tzinfo=MSK)
#         target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")
#
#     elif current_hour_msk == 15:
#         print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–Ω–µ–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ (—Å –ø–æ–ª—É–¥–Ω—è —Å–µ–≥–æ–¥–Ω—è –¥–æ 15:00 —Å–µ–≥–æ–¥–Ω—è)")
#         start_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=12), tzinfo=MSK)
#         end_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=14, minute=59, second=59),
#                                            tzinfo=MSK)
#         target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")
#
#     elif current_hour_msk == 19:
#         print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –≤–µ—á–µ—Ä–Ω–∏–µ –∑–≤–æ–Ω–∫–∏ (—Å 15:00 —Å–µ–≥–æ–¥–Ω—è –¥–æ 19:00 —Å–µ–≥–æ–¥–Ω—è)")
#         start_time_period = datetime.combine(current_date_msk, datetime.min.time().replace(hour=15), tzinfo=MSK)
#         end_time_period = datetime.combine(current_time_msk, datetime.min.time().replace(hour=18, minute=59, second=59),
#                                            tzinfo=MSK)
#         target_folder_date_str = current_date_msk.strftime("%d.%m.%Y")
#     else:
#         print(
#             "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ (12:00, 15:00, 19:00 –ú–°–ö). –ü—Ä–æ–ø—É—Å–∫–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
#         return # –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
#
#     if start_time_period and end_time_period:
#         print(
#             f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_time_period.strftime('%Y-%m-%d %H:%M:%S')} - {end_time_period.strftime('%Y-%m-%d %H:%M:%S')}")
#         print(f"–¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {target_folder_date_str}")
#
#         # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤–æ–Ω–∫–æ–≤
#         print("\n--- –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ ---")
#         download_calls(start_time_period, end_time_period)
#         audio_dir = Path("audio") / f"–∑–≤–æ–Ω–∫–∏_{target_folder_date_str}"
#         print(f"–°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ –∞—É–¥–∏–æ: {audio_dir.exists()} (—Å–æ–¥–µ—Ä–∂–∏—Ç {len(list(audio_dir.glob('*.mp3')))} mp3 —Ñ–∞–π–ª–æ–≤)")
#
#
#         # 2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤ (–≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö)
#         print("\n--- –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤ ---")
#         transcribe_all(target_folder_date_str, assign_roles=True)
#         transcripts_dir = Path("transcripts") / f"—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è_{target_folder_date_str}"
#         print(f"–°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤: {transcripts_dir.exists()} (—Å–æ–¥–µ—Ä–∂–∏—Ç {len(list(transcripts_dir.glob('*.txt')))} txt —Ñ–∞–π–ª–æ–≤)")
#
#
#         # 3. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ (analyzer.py —Å–∞–º —Ä–µ—à–∏—Ç, –∫–∞–∫–∏–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å)
#         print("\n--- –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ ---")
#         analyze_transcripts(target_folder_date_str)
#         analyses_dir = Path("analyses") / f"—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è_{target_folder_date_str}"
#         print(f"–°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤: {analyses_dir.exists()} (—Å–æ–¥–µ—Ä–∂–∏—Ç {len(list(analyses_dir.glob('*_analysis.json')))} json —Ñ–∞–π–ª–æ–≤)")
#
#
#         # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ Google Forms (–∏ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ google_sheets)
#         send_all_analyses_to_integrations(analyses_dir, target_folder_date_str)
#
#     print("\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")
#
#
# if __name__ == "__main__":
#     print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤ –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ (12:00, 15:00, 19:00 –ú–°–ö)...")
#     target_hours = [12, 15, 19] # –ß–∞—Å—ã –ø–æ –ú–°–ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞
#     last_run_date = None # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
#     hours_run_today = set() # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫–∞–∫–∏–µ —á–∞—Å—ã —É–∂–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
#
#     while True:
#         try:
#             current_time_msk = datetime.now(MSK)
#             current_hour_msk = current_time_msk.hour
#             current_date_msk = current_time_msk.date()
#
#             # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
#             if last_run_date is None or current_date_msk > last_run_date:
#                 hours_run_today.clear()
#                 last_run_date = current_date_msk
#                 print(f"\n--- –ù–æ–≤—ã–π –¥–µ–Ω—å: {last_run_date.strftime('%d.%m.%Y')}. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. ---")
#
#             if current_hour_msk in target_hours and current_hour_msk not in hours_run_today:
#                 print(f"\n--- –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è ({current_hour_msk}:00 –ú–°–ö). –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω... ---")
#                 run_processing_pipeline()
#                 hours_run_today.add(current_hour_msk)
#                 print(f"‚úÖ –ü–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {current_hour_msk}:00 –ú–°–ö.")
#             else:
#                 # –ü–µ—á–∞—Ç–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
#                 if current_time_msk.minute % 10 == 0 and current_time_msk.second < 5:
#                     next_runs = sorted(list(set(target_hours) - hours_run_today))
#                     if next_runs:
#                         print(f"[{current_time_msk.strftime('%H:%M:%S')}] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—É—Å–∫–∏: {next_runs} –ú–°–ö.")
#                     else:
#                         print(f"[{current_time_msk.strftime('%H:%M:%S')}] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í—Å–µ –∑–∞–ø—É—Å–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
#
#
#             # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
#             time.sleep(60) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
#
#         except Exception as e:
#             print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
#             print("–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ 60 —Å–µ–∫—É–Ω–¥...")
#             time.sleep(60) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å