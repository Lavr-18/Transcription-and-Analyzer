import requests
import os
import json
import time
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
from pathlib import Path
import re
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ retailcrm_integration
import sys

project_root = Path(__file__).resolve().parent
if str(project_root) not in sys.path:
    sys.path.append(str(project_root))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ä–æ–∑–Ω–∏—Ü—ã
from retailcrm_integration import check_if_phone_has_excluded_order, check_if_phone_has_recent_order

# Load token from .env
load_dotenv()
ACCESS_TOKEN = os.getenv("UIS_API_TOKEN")

# Define Moscow timezone (UTC+3)
MSK = timezone(timedelta(hours=3))


def get_calls_report(date_from, date_to) -> List[Dict[str, Any]]:
    """
    Retrieves call report from UIS server for a specified period.
    Returns a list of call metadata (dictionaries).
    """
    url = 'https://dataapi.uiscom.ru/v2.0'
    payload = {
        "id": "id777",
        "jsonrpc": "2.0",
        "method": "get.calls_report",
        "params": {
            "access_token": ACCESS_TOKEN,
            "date_from": date_from,
            "date_till": date_to
        }
    }

    print(f"üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–≤–æ–Ω–∫–æ–≤ —Å {date_from} –ø–æ {date_to}...")

    max_retries = 5
    retry_delay = 1

    for attempt in range(max_retries):
        try:
            response = requests.post(url, json=payload, timeout=(10, 60))
            response.raise_for_status()
            result = response.json()

            calls = result.get("result", {}).get("data", [])
            if not isinstance(calls, list):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: 'result.data' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∑–≤–æ–Ω–∫–æ–≤")

            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(calls)} –∑–≤–æ–Ω–∫–æ–≤.")
            return calls
        except (requests.exceptions.RequestException, ValueError) as e:
            if attempt < max_retries - 1:
                print(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
                time.sleep(retry_delay)
                retry_delay *= 2
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                return []
        except Exception as e:
            print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_calls_report: {e}")
            return []


def get_next_call_index(directory):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–≤–æ–Ω–∫–∞.
    """
    existing_files = list(Path(directory).glob("call*.mp3"))
    used_indexes = set()
    for f in existing_files:
        try:
            match = re.match(r'call(\d+)(?:_\d+)?\.mp3', f.name)
            if match:
                number = int(match.group(1))
                used_indexes.add(number)
        except ValueError:
            continue
    return max(used_indexes, default=0) + 1


def _get_call_duration(call: dict) -> int | None:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞."""
    duration = call.get("total_duration")
    if duration is None:
        duration = call.get("raw", {}).get("total_duration")
    return duration


def download_record(call, index, target_dir) -> Path | None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É call_info.json.
    """
    talk_id = call.get("communication_id")
    records = call.get("call_records", [])
    total_duration = _get_call_duration(call)

    if not talk_id or not records or total_duration is None or total_duration < 60:
        print(
            f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫ {call.get('communication_id', 'N/A')} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ < 60—Å. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration}s")
        return None

    record_hash = records[0]
    record_url = f"https://app.uiscom.ru/system/media/talk/{talk_id}/{record_hash}/"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    contact_phone = call.get("contact_phone_number") or call.get("raw", {}).get("contact_phone_number", "")
    call_direction = call.get("direction") or call.get("raw", {}).get("direction")

    base_filename = f"call{index}"
    if contact_phone:
        base_filename += f"_{contact_phone}"

    filename = Path(target_dir) / f"{base_filename}.mp3"
    info_filename = Path(target_dir) / f"{base_filename}_call_info.json"

    if filename.exists():
        print(f"‚è≠ –ó–∞–ø–∏—Å—å {filename.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
    else:
        print(f"‚¨á –ó–∞–≥—Ä—É–∂–∞–µ–º {filename.name}...")
        try:
            response = requests.get(record_url, timeout=(10, 30))
            if response.status_code == 200:
                with open(filename, 'wb') as f:
                    f.write(response.content)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename.name}")
            else:
                print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {record_url}: HTTP {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {talk_id}: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {talk_id}: {e}")

    order_link = ""

    try:
        call_info = {
            "start_time": call.get("start_time", ""),
            "raw": call,
            "customer_card_link": order_link,
            "contact_phone_number": contact_phone,
            "record_link": record_url
        }
        with open(info_filename, 'w', encoding='utf-8') as f:
            json.dump(call_info, f, indent=2, ensure_ascii=False)
        print(f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {info_filename.name}")
        return info_filename
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–æ–Ω–∫–µ –¥–ª—è {talk_id}: {e}")
        return None

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞, —á—Ç–æ–±—ã –µ—ë –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
def download_calls(calls_to_download: List[Dict[str, Any]], target_dir: Path) -> List[Path]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –∑–≤–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Å–ø–∏—Å–∫–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º info.json.
    """
    if not calls_to_download:
        print("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
        return []

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {len(calls_to_download)} –∑–≤–æ–Ω–∫–æ–≤.")

    if not ACCESS_TOKEN:
        print("‚ùó ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return []

    downloaded_call_info_paths = []

    try:
        current_idx = get_next_call_index(str(target_dir))
        for call in calls_to_download:
            info_file_path = download_record(call, current_idx, target_dir)
            if info_file_path:
                downloaded_call_info_paths.append(info_file_path)
            current_idx += 1
    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤–æ–Ω–∫–æ–≤: {e}")

    return downloaded_call_info_paths


if __name__ == "__main__":
    # --- –ë–õ–û–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –° –ü–û–î–†–û–ë–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú ---
    # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
    TEST_DATE = "08.09.2025"
    TEST_START_TIME = "12:00:00"
    TEST_END_TIME = "15:00:00"

    try:
        test_start_datetime = datetime.strptime(f"{TEST_DATE} {TEST_START_TIME}", "%d.%m.%Y %H:%M:%S")
        test_end_datetime = datetime.strptime(f"{TEST_DATE} {TEST_END_TIME}", "%d.%m.%Y %H:%M:%S")
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°.")
        exit()

    target_folder_date = test_start_datetime.strftime("%d.%m.%Y")
    target_dir = Path("audio") / f"–∑–≤–æ–Ω–∫–∏_{target_folder_date}"
    target_dir.mkdir(parents=True, exist_ok=True)

    print(f"\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞ {TEST_DATE} —Å {TEST_START_TIME} –ø–æ {TEST_END_TIME} ---")
    calls_list = get_calls_report(test_start_datetime.strftime("%Y-%m-%d %H:%M:%S"),
                                  test_end_datetime.strftime("%Y-%m-%d %H:%M:%S"))

    if calls_list:
        print("\n--- –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∑–≤–æ–Ω–∫–æ–≤ ---")
        filtered_calls = []
        for i, call in enumerate(calls_list):
            call_id = call.get("communication_id", "N/A")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            phone_number = call.get("contact_phone_number") or call.get("raw", {}).get("contact_phone_number")
            call_direction = call.get("direction") or call.get("raw", {}).get("direction")

            print(f"\nüìû –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–æ–Ω–∫–∞ ‚Ññ{i + 1} (ID: {call_id}) –æ—Ç –Ω–æ–º–µ—Ä–∞ {phone_number}...")

            if not phone_number or not call_direction:
                print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä ({phone_number}) –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ({call_direction}) –∑–≤–æ–Ω–∫–∞.")
                continue

            if call_direction == "in":
                print(f"  ‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –í–•–û–î–Ø–©–ò–ô. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
                has_excluded = check_if_phone_has_excluded_order(phone_number)
                if not has_excluded:
                    print(f"  ‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä: –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                    filtered_calls.append(call)
                else:
                    print(f"  ‚ùå –ó–≤–æ–Ω–æ–∫ –ù–ï –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä: –Ω–∞–π–¥–µ–Ω –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

            elif call_direction == "out":
                print(f"  ‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ò–°–•–û–î–Ø–©–ò–ô. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–π –∑–∞–∫–∞–∑...")
                has_recent = check_if_phone_has_recent_order(phone_number)
                if has_recent:
                    print(f"  ‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä: –µ—Å—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–π –∑–∞–∫–∞–∑. –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                    filtered_calls.append(call)
                else:
                    print(f"  ‚ùå –ó–≤–æ–Ω–æ–∫ –ù–ï –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä: –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

            else:
                print(f"  ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞: {call_direction}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        print(f"\n‚û°Ô∏è –ò—Ç–æ–≥–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(filtered_calls)} –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ {len(calls_list)}.")

        if filtered_calls:
            print("\n--- –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ ---")
            downloaded_paths = download_calls(filtered_calls, target_dir)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(downloaded_paths)}")
        else:
            print("–ù–µ—Ç –∑–≤–æ–Ω–∫–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    else:
        print("–ù–µ—Ç –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ.")

    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


# import requests
# import os
# import json
# import time  # Import time for delays
# from datetime import datetime, timedelta, timezone
# from dotenv import load_dotenv
# from retailcrm_integration import get_order_link_by_phone  # Import function for RetailCRM
# from pathlib import Path
# import re # Import re for get_next_call_index
#
# # Load token from .env
# load_dotenv()
# ACCESS_TOKEN = os.getenv("UIS_API_TOKEN")
#
# # Define Moscow timezone (UTC+3)
# MSK = timezone(timedelta(hours=3))
#
#
# def get_calls_report(date_from, date_to):
#     """
#     Retrieves call report from UIS server for a specified period.
#     Includes retry logic for increased resilience to network errors.
#     """
#     url = 'https://dataapi.uiscom.ru/v2.0'
#     payload = {
#         "id": "id777",
#         "jsonrpc": "2.0",
#         "method": "get.calls_report",
#         "params": {
#             "access_token": ACCESS_TOKEN,
#             "date_from": date_from,
#             "date_till": date_to
#         }
#     }
#
#     print(f"üîç Getting calls from {date_from} to {date_to}...")
#
#     max_retries = 5  # Maximum number of attempts
#     retry_delay = 1  # Initial delay in seconds (will double)
#
#     for attempt in range(max_retries):
#         try:
#             # Timeout set: 10 sec for connection, 60 sec for read
#             response = requests.post(url, json=payload, timeout=(10, 60))
#             response.raise_for_status()  # Raises an exception for HTTP errors (4xx or 5xx)
#             result = response.json()
#
#             calls = result.get("result", {}).get("data", [])
#             if not isinstance(calls, list):
#                 raise ValueError("Invalid data format: 'result.data' must be a list of calls")
#
#             print(f"‚úÖ Calls received: {len(calls)}")
#             return calls
#         except (requests.exceptions.RequestException, ValueError) as e:
#             # Catch network errors, timeouts, and data format errors
#             if attempt < max_retries - 1:
#                 print(
#                     f"‚ö†Ô∏è Error getting calls (attempt {attempt + 1}/{max_retries}): {e}. Retrying in {retry_delay} sec...")
#                 time.sleep(retry_delay)
#                 retry_delay *= 2  # Exponential backoff
#             else:
#                 print(f"‚ùå Error getting calls after {max_retries} attempts: {e}")
#                 return []  # Return empty list after failed attempts
#         except Exception as e:
#             # Catch any other unexpected errors
#             print(f"‚ùå Unexpected error in get_calls_report: {e}")
#             return []
#
#
# def get_next_call_index(directory):
#     """
#     Determines the next available index for a new callN.mp3 file,
#     to avoid overwriting and continue numbering.
#     Searches for files matching the pattern 'call{index}_{phone_number}.mp3'.
#     """
#     existing_files = list(Path(directory).glob("call*.mp3"))
#     used_indexes = set()
#     for f in existing_files:
#         try:
#             # Extract number from filename (e.g., "call123_79001234567.mp3" -> 123)
#             # Regular expression modified to correctly account for phone number in filename
#             match = re.match(r'call(\d+)(?:_\d+)?\.mp3', f.name)
#             if match:
#                 number = int(match.group(1))
#                 used_indexes.add(number)
#         except ValueError:
#             # Ignore files whose names do not match the pattern
#             continue
#     # Return max used index + 1, or 1 if no files exist
#     return max(used_indexes, default=0) + 1
#
# def _get_call_duration(call: dict) -> int | None:
#     """Helper function to robustly get call duration."""
#     duration = call.get("total_duration") # Try to get directly
#     if duration is None:
#         duration = call.get("raw", {}).get("total_duration") # Fallback to 'raw'
#     return duration
#
#
# def download_record(call, index, target_dir) -> Path | None:
#     """
#     Downloads a specific call recording, saves related information,
#     and searches for an order link in RetailCRM.
#     The filename will be in the format call{index}_{phone_number}.mp3.
#     Returns the path to the created call_info.json file if created, otherwise None.
#     """
#     talk_id = call.get("communication_id")
#     records = call.get("call_records", [])
#     total_duration = _get_call_duration(call) # Use the helper function
#
#     # Skip if no talk ID, no records, or duration is too short
#     if not talk_id or not records or total_duration is None or total_duration < 20:
#         print(f"Warning: Skipping call {call.get('communication_id', 'N/A')} due to missing info or duration < 20s. Duration: {total_duration}s")
#         return None  # Return None, as info file will not be created
#
#     record_hash = records[0]  # Take the hash of the first call record
#     # NEW: Form the full link to the call recording
#     record_url = f"https://app.uiscom.ru/system/media/talk/{talk_id}/{record_hash}/"
#
#     # Phone number can be at the top level or inside "raw"
#     contact_phone = call.get("contact_phone_number") or call.get("raw", {}).get("contact_phone_number", "")
#
#     # Include phone number in filename for consistent identification
#     base_filename = f"call{index}"
#     if contact_phone:
#         base_filename += f"_{contact_phone}"
#
#     filename = Path(target_dir) / f"{base_filename}.mp3"
#     info_filename = Path(target_dir) / f"{base_filename}_call_info.json"
#
#
#     if filename.exists():
#         print(f"‚è≠ Recording {filename.name} already exists, skipping.")
#     else:
#         print(f"‚¨á Downloading {filename.name}...")
#         try:
#             # Timeout set: 10 sec for connection, 30 sec for read
#             response = requests.get(record_url, timeout=(10, 30)) # Use record_url
#             if response.status_code == 200:
#                 with open(filename, 'wb') as f:
#                     f.write(response.content)
#                 print(f"‚úÖ Saved: {filename.name}")
#             else:
#                 print(f"‚ö† Download error {record_url}: HTTP {response.status_code}")
#         except requests.exceptions.RequestException as e:
#             print(f"‚ùå Network request error while downloading {talk_id}: {e}")
#         except Exception as e:
#             print(f"‚ùå Unknown error while downloading {talk_id}: {e}")
#
#     order_link = ""
#     if contact_phone:
#         order_link = get_order_link_by_phone(contact_phone)
#
#     try:
#         call_info = {
#             "start_time": call.get("start_time", ""),
#             "raw": call,
#             "customer_card_link": order_link,
#             "contact_phone_number": contact_phone,
#             "record_link": record_url # NEW: Add call recording link
#         }
#         with open(info_filename, 'w', encoding='utf-8') as f:
#             json.dump(call_info, f, indent=2, ensure_ascii=False)
#         print(f"üìù Information saved: {info_filename.name}")
#         return info_filename  # Return path to the created file
#     except Exception as e:
#         print(f"‚ùå Error saving call_info for {talk_id}: {e}")
#         return None  # Return None in case of save error
#
#
# def download_calls(start_time: datetime, end_time: datetime) -> list[Path]:
#     """
#     Main function for downloading calls within a specified period.
#     Returns a list of paths to created call_info.json files.
#     """
#     print("üöÄ Starting call download")
#
#     if not ACCESS_TOKEN:
#         print("‚ùó ACCESS_TOKEN not found in .env. Make sure .env file exists and contains ACCESS_TOKEN.")
#         return []
#
#     date_from_str = start_time.strftime("%Y-%m-%d %H:%M:%S")
#     date_to_str = end_time.strftime("%Y-%m-%d %H:%M:%S")
#
#     folder_date = end_time.strftime("%d.%m.%Y")
#     target_dir = Path("audio") / f"–∑–≤–æ–Ω–∫–∏_{folder_date}"
#     target_dir.mkdir(parents=True, exist_ok=True)
#     print(f"Checking or creating call folder: {target_dir}")
#
#     downloaded_call_info_paths = []
#
#     try:
#         calls = get_calls_report(date_from_str, date_to_str)
#         if not calls:
#             print("‚ÑπÔ∏è No calls for the specified period.")
#             return []
#
#         current_idx = get_next_call_index(str(target_dir))
#         for call in calls:
#             # Filter calls by duration (longer than 20 seconds)
#             total_duration = _get_call_duration(call) # Use the helper function
#             if total_duration is None or total_duration < 20:
#                 print(f"‚è© Skipping call {call.get('communication_id', 'N/A')} due to short duration: {total_duration}s")
#                 continue # Skip to the next call
#
#             # Only add path if download_record successfully created the file
#             info_file_path = download_record(call, current_idx, target_dir)
#             if info_file_path:
#                 downloaded_call_info_paths.append(info_file_path)
#             current_idx += 1
#
#     except Exception as e:
#         print(f"‚ùó Error executing call download script: {e}")
#
#     return downloaded_call_info_paths
#
#
# if __name__ == "__main__":
#     # Example usage for testing the module separately
#     today = datetime.now(MSK)
#     test_start_time = today.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=1)
#     test_end_time = today.replace(hour=23, minute=59, second=59, microsecond=999999) - timedelta(days=1)
#
#     print(
#         f"\n--- Testing download_calls for period: {test_start_time.strftime('%Y-%m-%d %H:%M:%S')} - {test_end_time.strftime('%Y-%m-%d %H:%M:%S')} ---")
#     download_calls(test_start_time, test_end_time)
#     print("\nCall download completed.")