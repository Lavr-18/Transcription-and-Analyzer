import os
import json
import requests
from datetime import datetime, timedelta
from pathlib import Path
import re
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ telegram_bot_integration.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤ PYTHONPATH
try:
    from telegram_bot_integration import send_telegram_message
except ImportError:
    print("–í–ù–ò–ú–ê–ù–ò–ï: –ú–æ–¥—É–ª—å telegram_bot_integration –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
    def send_telegram_message(message: str):
        print(f"  ‚ö†Ô∏è –ó–∞–≥–ª—É—à–∫–∞: send_telegram_message –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_manager_name_from_crm –∏–∑ retailcrm_integration
try:
    from retailcrm_integration import get_manager_name_from_crm
except ImportError:
    print("–í–ù–ò–ú–ê–ù–ò–ï: –ú–æ–¥—É–ª—å retailcrm_integration –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ get_manager_name_from_crm –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
    def get_manager_name_from_crm(phone_number: str) -> str:
        print("  ‚ö†Ô∏è –ó–∞–≥–ª—É—à–∫–∞: retailcrm_integration.get_manager_name_from_crm –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'.")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


# URL –≤–∞—à–µ–π Google Forms
FORM_URL = "https://docs.google.com/forms/u/0/d/e/1FAIpQLSeI-BvmkSZgzGXeQB83KQLR0O-5_ALgdhWg9LoMV7DskLqBLQ/formResponse"

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π –≤ Google Forms
ENTRY_MAP = {
    "number": "entry.1684791713", # –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–≤–æ–Ω–∫–∞
    "name": "entry.730205749", # –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    "phone": "entry.1794131010",
    "–¥–∞—Ç–∞_–∑–≤–æ–Ω–∫–∞": "entry.887244152",
    "—Ç–∏–ø_–∑–≤–æ–Ω–∫–∞": "entry.1308973478",
    "—Å—Å—ã–ª–∫–∞_–∑–∞–∫–∞–∑": "entry.1438937468",
    "—É–ª—ã–±–∫–∞_–≤_–≥–æ–ª–æ—Å–µ": "entry.762756437",
    "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ_–∫–æ–Ω—Ç–∞–∫—Ç–∞": "entry.2128803646",
    "–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è": "entry.1587001077",
    "–≤—ã—è–≤–ª–µ–Ω–∏–µ_–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏": "entry.298145485",
    "–ø–µ—Ä–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ": "entry.1475320463",
    "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏_–ø–æ–∑–∏—Ü–∏–π": "entry.427767033",
    "–≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ": "entry.374927679",
    "–æ—Ç—Ä–∞–±–æ—Ç–∫–∞_–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è": "entry.1984762538",
    "–¥–æ–∫–æ–º–ø–ª–µ–∫—Ç": "entry.1050706243",
    "–¥–æ–ø—Ä–æ–¥–∞–∂–∞": "entry.866877333",
    "—Å–æ—Å—Ç–∞–≤_–∏_—Å—É–º–º–∞": "entry.1544107090",
    "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ_–¥–µ—Ç–∞–ª–µ–π": "entry.1922686497",
    "–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞": "entry.257021647",
    "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è": "entry.2082353450", # –ù–û–í–û–ï –ü–û–õ–ï: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
    "—Å—Å—ã–ª–∫–∞_–Ω–∞_–∑–≤–æ–Ω–æ–∫": "entry.1098563992" # –ù–û–í–û–ï –ü–û–õ–ï: –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
}

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–ª—è 'phone', –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ)
EXTENSIONS = {
    "–ê–Ω–∞—Å—Ç–∞—Å–∏—è": "35",
    "–í–µ—Ä–∞": "45",
    "–ê–º–∞–ª–∏—è": "33",
    "–ï–≤–≥–µ–Ω–∏—è": "39",
    "–ê–Ω—Ç–æ–Ω": "47",
    "–ê–Ω–≥–µ–ª–∏–Ω–∞": "40",
    "–í–∏–∫—Ç–æ—Ä–∏—è": "41",
    "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä": "42",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞": "46"
}


def get_call_number_from_filename(filename: str) -> int:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–≤–æ–Ω–∫–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è 'call12_79163850107_analysis.json' –≤–µ—Ä–Ω–µ—Ç 12.
    """
    match = re.match(r'call(\d+)_.*_analysis\.json', filename)
    if match:
        return int(match.group(1))
    return 0


def format_duration(seconds: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —Å—Ç—Ä–æ–∫—É "X–º Y—Å".
    """
    if seconds is None:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    minutes = seconds // 60
    remaining_seconds = seconds % 60
    return f"{minutes}–º {remaining_seconds}—Å"


def send_analyses_to_google_form(folder_path: Path, target_folder_date_str: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤ –≤ Google Forms –∏ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤ Telegram,
    —É—á–∏—Ç—ã–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–≤–æ–Ω–∫–∞.

    Args:
        folder_path (Path): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å JSON-—Ñ–∞–π–ª–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞.
        target_folder_date_str (str): –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "25.06.2025").
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º audio –∏ transcripts
    audio_calls_folder = Path("audio") / f"–∑–≤–æ–Ω–∫–∏_{target_folder_date_str}"
    transcripts_folder = Path("transcripts") / f"—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è_{target_folder_date_str}"


    analysis_files = []
    for filename in os.listdir(folder_path):
        if filename.endswith("_analysis.json"):
            analysis_files.append(filename)

    analysis_files.sort(key=get_call_number_from_filename)

    for filename in analysis_files:
        base_name = filename.replace("_analysis.json", "")
        analysis_path = folder_path / filename
        info_path = audio_calls_folder / f"{base_name}_call_info.json"
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript_file_path = transcripts_folder / f"{base_name}.txt"


        call_summary = ""
        analysis_data = {}
        call_category = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        call_number_from_file = get_call_number_from_filename(filename)

        try:
            with open(analysis_path, "r", encoding="utf-8") as f:
                analysis_data = json.load(f)
                call_summary = analysis_data.get("summary", "")
                call_category = analysis_data.get("call_category", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        except FileNotFoundError:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {base_name}: {analysis_path}. –ü—Ä–æ–ø—É—Å–∫.")
            continue
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è {analysis_path}: {e}. –ü—Ä–æ–ø—É—Å–∫.")
            continue
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {analysis_path}: {e}. –ü—Ä–æ–ø—É—Å–∫.")
            continue

        start_time = ""
        call_type_with_duration = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        order_link = ""
        record_link = "" # –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞
        contact_phone_number = ""
        transcript_content = "" # –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

        if info_path.exists():
            try:
                with open(info_path, "r", encoding="utf-8") as f:
                    call_info = json.load(f)

                start_time = call_info.get("start_time", "")
                direction = call_info.get("raw", {}).get("direction", "")
                total_duration_seconds = call_info.get("raw", {}).get("total_duration")
                record_link = call_info.get("record_link", "") # –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º record_link

                duration_formatted = format_duration(total_duration_seconds)

                if direction == "in":
                    call_type_with_duration = f"–í—Ö–æ–¥—è—â–∏–µ ({duration_formatted})"
                elif direction == "out":
                    call_type_with_duration = f"–ò—Å—Ö–æ–¥—è—â–∏–µ ({duration_formatted})"
                else:
                    call_type_with_duration = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({duration_formatted})"

                order_link = call_info.get("customer_card_link", "")
                contact_phone_number = call_info.get("contact_phone_number", "")
                if not contact_phone_number:
                    contact_phone_number = call_info.get("raw", {}).get("contact_phone_number", "")

            except json.JSONDecodeError as e:
                print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è {info_path}: {e}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {info_path}: {e}")
        else:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –§–∞–π–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–æ–Ω–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {base_name}: {info_path}")

        # –ù–û–í–û–ï: –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if transcript_file_path.exists():
            try:
                with open(transcript_file_path, "r", encoding="utf-8") as f:
                    transcript_content = f.read()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {transcript_file_path}: {e}")
        else:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –§–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {base_name}: {transcript_file_path}")


        # --- –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ CRM, –µ—Å–ª–∏ –æ–Ω–æ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" ---
        manager = analysis_data.get("manager_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        phone_to_send = contact_phone_number

        phone_number_match = re.search(r'call\d+_(\d+)_analysis\.json', analysis_path.name)
        phone_number_from_filename = phone_number_match.group(1) if phone_number_match else None

        if manager == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and phone_number_from_filename:
            print(f"  üîç –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è {analysis_path.name}. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ RetailCRM –ø–æ –Ω–æ–º–µ—Ä—É {phone_number_from_filename}...")
            crm_manager_name = get_manager_name_from_crm(phone_number_from_filename)
            if crm_manager_name:
                manager = crm_manager_name
                print(f"  ‚úÖ –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {crm_manager_name} (–∏–∑ RetailCRM)")
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ RetailCRM –¥–ª—è {analysis_path.name}")


        # --- –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Forms ---
        if call_category == "–ó–∞–∫–∞–∑":
            payload = {
                ENTRY_MAP["number"]: call_number_from_file,
                ENTRY_MAP["name"]: manager,
                ENTRY_MAP["phone"]: phone_to_send,
                ENTRY_MAP["–¥–∞—Ç–∞_–∑–≤–æ–Ω–∫–∞"]: start_time,
                ENTRY_MAP["—Ç–∏–ø_–∑–≤–æ–Ω–∫–∞"]: call_type_with_duration,
                ENTRY_MAP["—Å—Å—ã–ª–∫–∞_–∑–∞–∫–∞–∑"]: order_link,
                ENTRY_MAP["—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"]: transcript_content, # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
                ENTRY_MAP["—Å—Å—ã–ª–∫–∞_–Ω–∞_–∑–≤–æ–Ω–æ–∫"]: record_link # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–≤–æ–Ω–æ–∫
            }

            for key in analysis_data:
                if key in ENTRY_MAP and key not in ["name", "—Ç–∏–ø_–∑–≤–æ–Ω–∫–∞", "—Å—Å—ã–ª–∫–∞_–∑–∞–∫–∞–∑", "call_category", "summary", "manager_name", "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", "—Å—Å—ã–ª–∫–∞_–Ω–∞_–∑–≤–æ–Ω–æ–∫"]:
                    payload[ENTRY_MAP[key]] = analysis_data[key]

            response = requests.post(FORM_URL, data=payload)
            if response.status_code == 200:
                print(f"[‚úì] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Google Forms: {filename} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {call_category})")
            else:
                print(
                    f"[‚úó] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Forms: {filename} ‚Äî Status {response.status_code}. –û—Ç–≤–µ—Ç: {response.text}")
        else:
            print(f"‚è© –ó–≤–æ–Ω–æ–∫ {filename} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {call_category}). –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Forms.")

        # --- –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ –≤ Telegram ---
        if call_summary and call_category in ["–ó–∞–∫–∞–∑", "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"]:
            order_link_formatted = f'<a href="{order_link}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑</a>' if order_link else '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'
            record_link_formatted = f'<a href="{record_link}">–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∑–≤–æ–Ω–æ–∫</a>' if record_link else '–ù–µ –Ω–∞–π–¥–µ–Ω–∞' # –ù–û–í–û–ï: –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å

            telegram_message = f"üìû <b>–û—Ç—á–µ—Ç –ø–æ –∑–≤–æ–Ω–∫—É ‚Ññ{call_number_from_file}</b>\n" \
                               f"‚ú® <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <u>{call_category}</u>\n" \
                               f"üóìÔ∏è {start_time.split(' ')[0] if start_time else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} | {call_type_with_duration}\n\n" \
                               f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: <b>{manager}</b>\n" \
                               f"üì± –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: <b>{phone_to_send if phone_to_send else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</b>\n" \
                               f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: {order_link_formatted}\n" \
                               f"üéß –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: {record_link_formatted}\n\n" \
                               f"üìù <b>–†–µ–∑—é–º–µ –¥–ª—è –†–û–ü–∞:</b>\n{call_summary}"

            send_telegram_message(telegram_message)
        elif not call_summary:
            print(f"‚ÑπÔ∏è –†–µ–∑—é–º–µ –¥–ª—è {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞–Ω–∞–ª–∏–∑–µ, –≤ Telegram –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            print(f"‚è© –ó–≤–æ–Ω–æ–∫ {filename} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {call_category}). –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ –≤ Telegram.")


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today_str = datetime.today().strftime("%d.%m.%Y")
    folder_name = Path("analyses") / f"—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è_{today_str}"
    send_analyses_to_google_form(folder_name, today_str)